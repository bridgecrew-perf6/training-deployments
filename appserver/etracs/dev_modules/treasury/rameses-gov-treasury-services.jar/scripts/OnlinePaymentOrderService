import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;

public class OnlinePaymentOrderService {
	
	@DataContext("collectiontype")
	def collectionTypeEm;

	@DataContext("barcode_launcher")
	def barcodeLauncherEm;

	@Service(dynamic=true)
	def dynSvc;

	@Env
	def env;

	private def getPaymentOrderService(def conn) {
		if( conn==null || conn=="default" )	{
			return dynSvc.lookup("PaymentOrderService");
		}	
		else {
			return dynSvc.lookup("PaymentOrderService", conn);
		}	
	}

	private def parseKey(def o ) {
		if(!o.refno) throw new Exception("refno is required");
		def arr = o.refno.split(":");
		if( arr.length!=2) throw new Exception("refno is invalid. It must be <PREFIX:REFNO> format");
		return [barcodekey:arr[0], refno: arr[1]];
	}

	@ProxyMethod
	public def getPaymentOrderBarcodeKey( def o ) {
		if(!o.connection) o.connection = "default";
		return barcodeLauncherEm.find( [connection: o.connection ] ).where("paymentorder=1").first()?.objid; 
	}

	@ProxyMethod
	public def getBilling(o) {
		def map = parseKey(o);
		def bc = barcodeLauncherEm.find( [objid: map.barcodekey ] ).first();

		if(!bc) throw new Exception("paymentorder launcher with id " + map.barcodekey + " not found");
		
		def svc = getPaymentOrderService( bc.connection );  
		def bill = svc.getBilling( map );
		if(!bill.items) throw new Exception("Bill must have items");

		bill._connection = bc.connection;
		if(!bill._connection) bc._connection = "default";
		bill.objid = bill._paymentorderid;
		return bill;
	}

	@ProxyMethod
	public def postPayment(def o ) {
		if(!o.objid) throw new Exception("Please provide paymentorder objid");

		def svc = getPaymentOrderService( o._connection );  
		svc.postPayment( [objid: o.objid] );
		return [status: "OK"];
	}


}
